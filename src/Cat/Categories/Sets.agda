{-# OPTIONS --allow-unsolved-metas --cubical #-}
module Cat.Categories.Sets where

open import Cubical
open import Agda.Primitive
open import Data.Product
import Function

open import Cat.Category
open import Cat.Category.Functor
open import Cat.Category.Product
open Category

module _ {‚Ñì : Level} where
  SetsRaw : RawCategory (lsuc ‚Ñì) ‚Ñì
  RawCategory.Object SetsRaw = Set ‚Ñì
  RawCategory.Arrow SetsRaw = Œª T U ‚Üí T ‚Üí U
  RawCategory.ùüô SetsRaw = Function.id
  RawCategory._‚àò_ SetsRaw = Function._‚àò‚Ä≤_

  open IsCategory
  SetsIsCategory : IsCategory SetsRaw
  assoc SetsIsCategory = refl
  proj‚ÇÅ (ident SetsIsCategory) = funExt Œª _ ‚Üí refl
  proj‚ÇÇ (ident SetsIsCategory) = funExt Œª _ ‚Üí refl
  arrowIsSet SetsIsCategory = {!!}
  univalent SetsIsCategory = {!!}

  Sets : Category (lsuc ‚Ñì) ‚Ñì
  raw Sets = SetsRaw
  isCategory Sets = SetsIsCategory

  private
    module _ {X A B : Set ‚Ñì} (f : X ‚Üí A) (g : X ‚Üí B) where
      _&&&_ : (X ‚Üí A √ó B)
      _&&&_ x = f x , g x
    module _ {X A B : Set ‚Ñì} (f : X ‚Üí A) (g : X ‚Üí B) where
      lem : Sets [ proj‚ÇÅ ‚àò (f &&& g)] ‚â° f √ó Sets [ proj‚ÇÇ ‚àò (f &&& g)] ‚â° g
      proj‚ÇÅ lem = refl
      proj‚ÇÇ lem = refl
    instance
      isProduct : {A B : Object Sets} ‚Üí IsProduct Sets {A} {B} proj‚ÇÅ proj‚ÇÇ
      isProduct f g = f &&& g , lem f g

    product : (A B : Object Sets) ‚Üí Product {‚ÑÇ = Sets} A B
    product A B = record { obj = A √ó B ; proj‚ÇÅ = proj‚ÇÅ ; proj‚ÇÇ = proj‚ÇÇ ; isProduct = isProduct }

  instance
    SetsHasProducts : HasProducts Sets
    SetsHasProducts = record { product = product }

-- Covariant Presheaf
Representable : {‚Ñì ‚Ñì' : Level} ‚Üí (‚ÑÇ : Category ‚Ñì ‚Ñì') ‚Üí Set (‚Ñì ‚äî lsuc ‚Ñì')
Representable {‚Ñì' = ‚Ñì'} ‚ÑÇ = Functor ‚ÑÇ (Sets {‚Ñì'})

-- The "co-yoneda" embedding.
representable : ‚àÄ {‚Ñì ‚Ñì'} {‚ÑÇ : Category ‚Ñì ‚Ñì'} ‚Üí Category.Object ‚ÑÇ ‚Üí Representable ‚ÑÇ
representable {‚ÑÇ = ‚ÑÇ} A = record
  { raw = record
    { func* = Œª B ‚Üí ‚ÑÇ [ A , B ]
    ; func‚Üí = ‚ÑÇ [_‚àò_]
    }
  ; isFunctor = record
    { ident = funExt Œª _ ‚Üí proj‚ÇÇ ident
    ; distrib = funExt Œª x ‚Üí sym assoc
    }
  }
  where
    open IsCategory (isCategory ‚ÑÇ)

-- Contravariant Presheaf
Presheaf : ‚àÄ {‚Ñì ‚Ñì'} (‚ÑÇ : Category ‚Ñì ‚Ñì') ‚Üí Set (‚Ñì ‚äî lsuc ‚Ñì')
Presheaf {‚Ñì' = ‚Ñì'} ‚ÑÇ = Functor (Opposite ‚ÑÇ) (Sets {‚Ñì'})

-- Alternate name: `yoneda`
presheaf : {‚Ñì ‚Ñì' : Level} {‚ÑÇ : Category ‚Ñì ‚Ñì'} ‚Üí Category.Object (Opposite ‚ÑÇ) ‚Üí Presheaf ‚ÑÇ
presheaf {‚ÑÇ = ‚ÑÇ} B = record
  { raw = record
    { func* = Œª A ‚Üí ‚ÑÇ [ A , B ]
    ; func‚Üí = Œª f g ‚Üí ‚ÑÇ [ g ‚àò f ]
  }
  ; isFunctor = record
    { ident = funExt Œª x ‚Üí proj‚ÇÅ ident
    ; distrib = funExt Œª x ‚Üí assoc
    }
  }
  where
    open IsCategory (isCategory ‚ÑÇ)
