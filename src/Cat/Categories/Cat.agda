{-# OPTIONS --cubical --allow-unsolved-metas #-}

module Cat.Categories.Cat where

open import Agda.Primitive
open import Cubical
open import Function
open import Data.Product renaming (proj‚ÇÅ to fst ; proj‚ÇÇ to snd)

open import Cat.Category
open import Cat.Functor

-- The category of categories
module _ {‚Ñì ‚Ñì' : Level} where
  private
    _‚äõ_ = functor-comp
    module _ {A B C D : Category {‚Ñì} {‚Ñì'}} {f : Functor A B} {g : Functor B C} {h : Functor C D} where
      assc : h ‚äõ (g ‚äõ f) ‚â° (h ‚äõ g) ‚äõ f
      assc = {!!}

    module _ {A B : Category {‚Ñì} {‚Ñì'}} where
      lift-eq : (f g : Functor A B)
        ‚Üí (eq* : Functor.func* f ‚â° Functor.func* g)
        -- TODO: Must transport here using the equality from above.
        -- Reason:
        --   func‚Üí  : Arrow A dom cod ‚Üí Arrow B (func* dom) (func* cod)
        --   func‚Üí‚ÇÅ : Arrow A dom cod ‚Üí Arrow B (func*‚ÇÅ dom) (func*‚ÇÅ cod)
        -- In other words, func‚Üí and func‚Üí‚ÇÅ does not have the same type.
  --      ‚Üí Functor.func‚Üí f ‚â° Functor.func‚Üí g
  --      ‚Üí Functor.ident f ‚â° Functor.ident g
  --       ‚Üí Functor.distrib f ‚â° Functor.distrib g
        ‚Üí f ‚â° g
      lift-eq f g eq* x = {!!}

    module _ {A B : Category {‚Ñì} {‚Ñì'}} {f : Functor A B} where
      idHere = identity {‚Ñì} {‚Ñì'} {A}
      lem : (Functor.func* f) ‚àò (Functor.func* idHere) ‚â° Functor.func* f
      lem = refl
      ident-r : f ‚äõ identity ‚â° f
      ident-r = lift-eq (f ‚äõ identity) f refl
      ident-l : identity ‚äõ f ‚â° f
      ident-l = {!!}

  CatCat : Category {lsuc (‚Ñì ‚äî ‚Ñì')} {‚Ñì ‚äî ‚Ñì'}
  CatCat =
    record
      { Object = Category {‚Ñì} {‚Ñì'}
      ; Arrow = Functor
      ; ùüô = identity
      ; _‚äï_ = functor-comp
      ; assoc = {!!}
      ; ident = ident-r , ident-l
      }
