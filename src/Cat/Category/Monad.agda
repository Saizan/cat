{-# OPTIONS --cubical #-}
module Cat.Category.Monad where

open import Agda.Primitive

open import Data.Product

open import Cubical

open import Cat.Category
open import Cat.Category.Functor as F
open import Cat.Category.NaturalTransformation
open import Cat.Categories.Fun

-- "A monad in the monoidal form" [vlad]
module Monoidal {‚Ñìa ‚Ñìb : Level} (‚ÑÇ : Category ‚Ñìa ‚Ñìb) where
  private
    ‚Ñì = ‚Ñìa ‚äî ‚Ñìb

  open Category ‚ÑÇ hiding (IsAssociative)
  open NaturalTransformation ‚ÑÇ ‚ÑÇ
  record RawMonad : Set ‚Ñì where
    field
      R : Functor ‚ÑÇ ‚ÑÇ
      -- pure
      Œ∑Nat : NaturalTransformation F.identity R
      -- (>=>)
      ŒºNat : NaturalTransformation F[ R ‚àò R ] R


    private
      module R  = Functor R
      module RR = Functor F[ R ‚àò R ]
      module _ {X : Object} where
        -- module IdRX = Functor (F.identity {C = RX})

        Œ∑ : Transformation F.identity R
        Œ∑ = proj‚ÇÅ Œ∑Nat
        Œ∑X  : ‚ÑÇ [ X                    , R.func* X ]
        Œ∑X = Œ∑ X
        RŒ∑X : ‚ÑÇ [ R.func* X            , R.func* (R.func* X) ] -- ‚ÑÇ [ R.func* X , {!R.func* (R.func* X))!} ]
        RŒ∑X = R.func‚Üí Œ∑X
        Œ∑RX = Œ∑ (R.func* X)
        IdRX : Arrow (R.func* X) (R.func* X)
        IdRX = ùüô {R.func* X}

        Œº : Transformation F[ R ‚àò R ] R
        Œº = proj‚ÇÅ ŒºNat
        ŒºX  : ‚ÑÇ [ RR.func* X           , R.func* X ]
        ŒºX = Œº X
        RŒºX : ‚ÑÇ [ R.func* (RR.func* X) , RR.func* X ]
        RŒºX = R.func‚Üí ŒºX
        ŒºRX : ‚ÑÇ [ RR.func* (R.func* X) , R.func* (R.func* X) ]
        ŒºRX = Œº (R.func* X)

        IsAssociative' : Set _
        IsAssociative' = ‚ÑÇ [ ŒºX ‚àò RŒºX ] ‚â° ‚ÑÇ [ ŒºX ‚àò ŒºRX ]
        IsInverse' : Set _
        IsInverse'
          = ‚ÑÇ [ ŒºX ‚àò Œ∑RX ] ‚â° IdRX
          √ó ‚ÑÇ [ ŒºX ‚àò RŒ∑X ] ‚â° IdRX

    -- We don't want the objects to be indexes of the type, but rather just
    -- universally quantify over *all* objects of the category.
    IsAssociative = {X : Object} ‚Üí IsAssociative' {X}
    IsInverse = {X : Object} ‚Üí IsInverse' {X}

  record IsMonad (raw : RawMonad) : Set ‚Ñì where
    open RawMonad raw public
    field
      isAssociative : IsAssociative
      isInverse : IsInverse

  record Monad : Set ‚Ñì where
    field
      raw : RawMonad
      isMonad : IsMonad raw
    open IsMonad isMonad public

-- "A monad in the Kleisli form" [vlad]
module Kleisli {‚Ñìa ‚Ñìb : Level} (‚ÑÇ : Category ‚Ñìa ‚Ñìb) where
  private
    ‚Ñì = ‚Ñìa ‚äî ‚Ñìb

  open Category ‚ÑÇ hiding (IsIdentity)
  record RawMonad : Set ‚Ñì where
    field
      RR : Object ‚Üí Object
      Œ∑ : {X : Object} ‚Üí ‚ÑÇ [ X , RR X ]
      rr : {X Y : Object} ‚Üí ‚ÑÇ [ X , RR Y ] ‚Üí ‚ÑÇ [ RR X , RR Y ]
    -- Name suggestions are welcome!
    IsIdentity     = {X : Object}
      ‚Üí rr Œ∑ ‚â° ùüô {RR X}
    IsNatural      = {X Y : Object}   (f : ‚ÑÇ [ X , RR Y ])
      ‚Üí (‚ÑÇ [ rr f ‚àò Œ∑ ]) ‚â° f
    IsDistributive = {X Y Z : Object} (g : ‚ÑÇ [ Y , RR Z ]) (f : ‚ÑÇ [ X , RR Y ])
      ‚Üí ‚ÑÇ [ rr g ‚àò rr f ] ‚â° rr (‚ÑÇ [ rr g ‚àò f ])

  record IsMonad (raw : RawMonad) : Set ‚Ñì where
    open RawMonad raw public
    field
      isIdentity     : IsIdentity
      isNatural      : IsNatural
      isDistributive : IsDistributive

  record Monad : Set ‚Ñì where
    field
      raw : RawMonad
      isMonad : IsMonad raw
    open IsMonad isMonad public
