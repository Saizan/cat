{-# OPTIONS --allow-unsolved-metas --cubical #-}
module Cat.Category.Product where

open import Cubical.NType.Properties
open import Cat.Prelude hiding (_√ó_ ; proj‚ÇÅ ; proj‚ÇÇ)
import Data.Product as P

open import Cat.Category

module _ {‚Ñìa ‚Ñìb : Level} (‚ÑÇ : Category ‚Ñìa ‚Ñìb) where

  open Category ‚ÑÇ

  module _ (A B : Object) where
    record RawProduct : Set (‚Ñìa ‚äî ‚Ñìb) where
      no-eta-equality
      field
        object : Object
        proj‚ÇÅ  : ‚ÑÇ [ object , A ]
        proj‚ÇÇ  : ‚ÑÇ [ object , B ]

    -- FIXME Not sure this is actually a proposition - so this name is
    -- misleading.
    record IsProduct (raw : RawProduct) : Set (‚Ñìa ‚äî ‚Ñìb) where
      open RawProduct raw public
      field
        ump : ‚àÄ {X : Object} (f : ‚ÑÇ [ X , A ]) (g : ‚ÑÇ [ X , B ])
          ‚Üí ‚àÉ![ f√óg ] (‚ÑÇ [ proj‚ÇÅ ‚àò f√óg ] ‚â° f P.√ó ‚ÑÇ [ proj‚ÇÇ ‚àò f√óg ] ‚â° g)

      -- | Arrow product
      _P[_√ó_] : ‚àÄ {X} ‚Üí (œÄ‚ÇÅ : ‚ÑÇ [ X , A ]) (œÄ‚ÇÇ : ‚ÑÇ [ X , B ])
        ‚Üí ‚ÑÇ [ X , object ]
      _P[_√ó_] œÄ‚ÇÅ œÄ‚ÇÇ = P.proj‚ÇÅ (ump œÄ‚ÇÅ œÄ‚ÇÇ)

    record Product : Set (‚Ñìa ‚äî ‚Ñìb) where
      field
        raw        : RawProduct
        isProduct  : IsProduct raw

      open IsProduct isProduct public

  record HasProducts : Set (‚Ñìa ‚äî ‚Ñìb) where
    field
      product : ‚àÄ (A B : Object) ‚Üí Product A B

    _√ó_ : Object ‚Üí Object ‚Üí Object
    A √ó B = Product.object (product A B)

    -- | Parallel product of arrows
    --
    -- The product mentioned in awodey in Def 6.1 is not the regular product of
    -- arrows. It's a "parallel" product
    module _ {A A' B B' : Object} where
      open Product
      open Product (product A B) hiding (_P[_√ó_]) renaming (proj‚ÇÅ to fst ; proj‚ÇÇ to snd)
      _|√ó|_ : ‚ÑÇ [ A , A' ] ‚Üí ‚ÑÇ [ B , B' ] ‚Üí ‚ÑÇ [ A √ó B , A' √ó B' ]
      f |√ó| g = product A' B'
        P[ ‚ÑÇ [ f ‚àò fst ]
        √ó  ‚ÑÇ [ g ‚àò snd ]
        ]

module _ {‚Ñìa ‚Ñìb : Level} {‚ÑÇ : Category ‚Ñìa ‚Ñìb} {A B : Category.Object ‚ÑÇ} where
  private
    open Category ‚ÑÇ
    module _ (raw : RawProduct ‚ÑÇ A B) where
      module _ (x y : IsProduct ‚ÑÇ A B raw) where
        private
          module x = IsProduct x
          module y = IsProduct y

        module _ {X : Object} (f : ‚ÑÇ [ X , A ]) (g : ‚ÑÇ [ X , B ]) where
          prodAux : x.ump f g ‚â° y.ump f g
          prodAux = {!!}

        propIsProduct' : x ‚â° y
        propIsProduct' i = record { ump = Œª f g ‚Üí prodAux f g i }

      propIsProduct : isProp (IsProduct ‚ÑÇ A B raw)
      propIsProduct = propIsProduct'

  Product‚â° : {x y : Product ‚ÑÇ A B} ‚Üí (Product.raw x ‚â° Product.raw y) ‚Üí x ‚â° y
  Product‚â° {x} {y} p i = record { raw = p i ; isProduct = q i }
    where
    q : (Œª i ‚Üí IsProduct ‚ÑÇ A B (p i)) [ Product.isProduct x ‚â° Product.isProduct y ]
    q = lemPropF propIsProduct p

module _ {‚Ñìa ‚Ñìb : Level} {‚ÑÇ : Category ‚Ñìa ‚Ñìb} {A B : Category.Object ‚ÑÇ} where
  open Category ‚ÑÇ
  private
    module _ (x y : HasProducts ‚ÑÇ) where
      private
        module x = HasProducts x
        module y = HasProducts y
      module _ (A B : Object) where
        module pX = Product (x.product A B)
        module pY = Product (y.product A B)
        objEq : pX.object ‚â° pY.object
        objEq = {!!}
        proj‚ÇÅEq : (Œª i ‚Üí ‚ÑÇ [ objEq i , A ]) [ pX.proj‚ÇÅ ‚â° pY.proj‚ÇÅ ]
        proj‚ÇÅEq = {!!}
        proj‚ÇÇEq : (Œª i ‚Üí ‚ÑÇ [ objEq i , B ]) [ pX.proj‚ÇÇ ‚â° pY.proj‚ÇÇ ]
        proj‚ÇÇEq = {!!}
        rawEq : pX.raw ‚â° pY.raw
        RawProduct.object (rawEq i) = objEq i
        RawProduct.proj‚ÇÅ  (rawEq i) = {!!}
        RawProduct.proj‚ÇÇ  (rawEq i) = {!!}

        isEq : (Œª i ‚Üí IsProduct ‚ÑÇ A B (rawEq i)) [ pX.isProduct ‚â° pY.isProduct ]
        isEq = {!!}

        appEq : x.product A B ‚â° y.product A B
        appEq = Product‚â° rawEq

      productEq : x.product ‚â° y.product
      productEq i = Œª A B ‚Üí appEq A B i

      propHasProducts' : x ‚â° y
      propHasProducts' i = record { product = productEq i }

  propHasProducts : isProp (HasProducts ‚ÑÇ)
  propHasProducts = propHasProducts'

module Try0 {‚Ñìa ‚Ñìb : Level} {‚ÑÇ : Category ‚Ñìa ‚Ñìb}
  (let module ‚ÑÇ = Category ‚ÑÇ) {A B : ‚ÑÇ.Object} where

  open import Data.Product

  module _ where
    raw : RawCategory _ _
    raw = record
      { Object = Œ£[ X ‚àà ‚ÑÇ.Object ] ‚ÑÇ.Arrow X A √ó ‚ÑÇ.Arrow X B
      ; Arrow = Œª{ (X , xa , xb) (Y , ya , yb)
        ‚Üí Œ£[ xy ‚àà ‚ÑÇ.Arrow X Y ]
          ( ‚ÑÇ [ ya ‚àò xy ] ‚â° xa)
          √ó ‚ÑÇ [ yb ‚àò xy ] ‚â° xb
          }
      ; ùüô = Œª{ {A , f , g} ‚Üí ‚ÑÇ.ùüô {A} , ‚ÑÇ.rightIdentity , ‚ÑÇ.rightIdentity}
      ; _‚àò_ = Œª { {A , a0 , a1} {B , b0 , b1} {C , c0 , c1} (f , f0 , f1) (g , g0 , g1)
        ‚Üí (f ‚ÑÇ.‚àò g)
          , (begin
              ‚ÑÇ [ c0 ‚àò ‚ÑÇ [ f ‚àò g ] ] ‚â°‚ü® ‚ÑÇ.isAssociative ‚ü©
              ‚ÑÇ [ ‚ÑÇ [ c0 ‚àò f ] ‚àò g ] ‚â°‚ü® cong (Œª œÜ ‚Üí ‚ÑÇ [ œÜ ‚àò g ]) f0 ‚ü©
              ‚ÑÇ [ b0 ‚àò g ] ‚â°‚ü® g0 ‚ü©
              a0 ‚àé
            )
          , (begin
             ‚ÑÇ [ c1 ‚àò ‚ÑÇ [ f ‚àò g ] ] ‚â°‚ü® ‚ÑÇ.isAssociative ‚ü©
             ‚ÑÇ [ ‚ÑÇ [ c1 ‚àò f ] ‚àò g ] ‚â°‚ü® cong (Œª œÜ ‚Üí ‚ÑÇ [ œÜ ‚àò g ]) f1 ‚ü©
             ‚ÑÇ [ b1 ‚àò g ] ‚â°‚ü® g1 ‚ü©
              a1 ‚àé
            )
        }
      }

    open RawCategory raw

    propEqs : ‚àÄ {X' : Object}{Y' : Object} (let X , xa , xb = X') (let Y , ya , yb = Y')
              ‚Üí (xy : ‚ÑÇ.Arrow X Y) ‚Üí isProp (‚ÑÇ [ ya ‚àò xy ] ‚â° xa √ó ‚ÑÇ [ yb ‚àò xy ] ‚â° xb)
    propEqs xs = propSig (‚ÑÇ.arrowsAreSets _ _) (\ _ ‚Üí ‚ÑÇ.arrowsAreSets _ _)

    isAssocitaive : IsAssociative
    isAssocitaive {A'@(A , a0 , a1)} {B , _} {C , c0 , c1} {D'@(D , d0 , d1)} {ff@(f , f0 , f1)} {gg@(g , g0 , g1)} {hh@(h , h0 , h1)} i
      = s0 i , lemPropF propEqs s0 {proj‚ÇÇ l} {proj‚ÇÇ r} i
      where
      l = hh ‚àò (gg ‚àò ff)
      r = hh ‚àò gg ‚àò ff
      -- s0 : h ‚ÑÇ.‚àò (g ‚ÑÇ.‚àò f) ‚â° h ‚ÑÇ.‚àò g ‚ÑÇ.‚àò f
      s0 : proj‚ÇÅ l ‚â° proj‚ÇÅ r
      s0 = ‚ÑÇ.isAssociative {f = f} {g} {h}


    isIdentity : IsIdentity ùüô
    isIdentity {AA@(A , a0 , a1)} {BB@(B , b0 , b1)} {f , f0 , f1} = leftIdentity , rightIdentity
      where
      leftIdentity : ùüô ‚àò (f , f0 , f1) ‚â° (f , f0 , f1)
      leftIdentity i = l i , lemPropF propEqs l {proj‚ÇÇ L} {proj‚ÇÇ R} i
        where
        L = ùüô ‚àò (f , f0 , f1)
        R : Arrow AA BB
        R = f , f0 , f1
        l : proj‚ÇÅ L ‚â° proj‚ÇÅ R
        l = ‚ÑÇ.leftIdentity
      rightIdentity : (f , f0 , f1) ‚àò ùüô ‚â° (f , f0 , f1)
      rightIdentity i = l i , lemPropF propEqs l {proj‚ÇÇ L} {proj‚ÇÇ R} i
        where
        L = (f , f0 , f1) ‚àò ùüô
        R : Arrow AA BB
        R = (f , f0 , f1)
        l : ‚ÑÇ [ f ‚àò ‚ÑÇ.ùüô ] ‚â° f
        l = ‚ÑÇ.rightIdentity

    arrowsAreSets : ArrowsAreSets
    arrowsAreSets {X , x0 , x1} {Y , y0 , y1} (f , f0 , f1) (g , g0 , g1) p q = {!!}
      where
      prop : ‚àÄ {X Y} (x y : ‚ÑÇ.Arrow X Y) ‚Üí isProp (x ‚â° y)
      prop = ‚ÑÇ.arrowsAreSets
      a0 a1 : f ‚â° g
      a0 i = proj‚ÇÅ (p i)
      a1 i = proj‚ÇÅ (q i)
      a : a0 ‚â° a1
      a = ‚ÑÇ.arrowsAreSets _ _ a0 a1
      res : p ‚â° q
      res i j = a i j , {!b i j!} , {!!}
        where
        -- b0 b1 : (Œª j ‚Üí (‚ÑÇ [ y0 ‚àò a i j ]) ‚â° x0) [ f0 ‚â° g0 ]
        -- b0 = lemPropF (Œª x ‚Üí prop (‚ÑÇ [ y0 ‚àò x ]) x0) (a i)
        -- b1 = lemPropF (Œª x ‚Üí prop (‚ÑÇ [ y0 ‚àò x ]) x0) (a i)
        b0 : (Œª j ‚Üí (‚ÑÇ [ y0 ‚àò a0 j ]) ‚â° x0) [ f0 ‚â° g0 ]
        b0 = lemPropF (Œª x ‚Üí prop (‚ÑÇ [ y0 ‚àò x ]) x0) a0
        b1 : (Œª j ‚Üí (‚ÑÇ [ y0 ‚àò a1 j ]) ‚â° x0) [ f0 ‚â° g0 ]
        b1 = lemPropF (Œª x ‚Üí prop (‚ÑÇ [ y0 ‚àò x ]) x0) a1
        -- b : b0 ‚â° b1
        -- b = {!!}

    isCat : IsCategory raw
    isCat = record
      { isAssociative = isAssocitaive
      ; isIdentity    = isIdentity
      ; arrowsAreSets = arrowsAreSets
      ; univalent     = {!!}
      }

    cat : Category _ _
    cat = record
      { raw = raw
      ; isCategory = isCat
      }

  open Category cat

  open import Cat.Equivalence

  lemma : Terminal ‚âÉ Product ‚ÑÇ A B
  lemma = Equiv‚âÉ.fromIsomorphism Terminal (Product ‚ÑÇ A B) (f , g , inv)
    where
    f : Terminal ‚Üí Product ‚ÑÇ A B
    f ((X , x0 , x1) , uniq) = p
      where
      rawP : RawProduct ‚ÑÇ A B
      rawP = record
        { object = X
        ; proj‚ÇÅ = x0
        ; proj‚ÇÇ = x1
        }
      -- open RawProduct rawP renaming (proj‚ÇÅ to x0 ; proj‚ÇÇ to x1)
      module _ {Y : ‚ÑÇ.Object} (p0 : ‚ÑÇ [ Y , A ]) (p1 : ‚ÑÇ [ Y , B ]) where
        uy : isContr (Arrow (Y , p0 , p1) (X , x0 , x1))
        uy = uniq {Y , p0 , p1}
        open Œ£ uy renaming (proj‚ÇÅ to Y‚ÜíX ; proj‚ÇÇ to contractible)
        open Œ£ Y‚ÜíX renaming (proj‚ÇÅ to p0√óp1 ; proj‚ÇÇ to cond)
        ump : ‚àÉ![ f√óg ] (‚ÑÇ [ x0 ‚àò f√óg ] ‚â° p0 P.√ó ‚ÑÇ [ x1 ‚àò f√óg ] ‚â° p1)
        ump = p0√óp1 , cond , Œª {y} x ‚Üí let k = contractible (y , x) in Œª i ‚Üí proj‚ÇÅ (k i)
      isP : IsProduct ‚ÑÇ A B rawP
      isP = record { ump = ump }
      p : Product ‚ÑÇ A B
      p = record
        { raw = rawP
        ; isProduct = isP
        }
    g : Product ‚ÑÇ A B ‚Üí Terminal
    g p = o , t
      where
      module p = Product p
      module isp = IsProduct p.isProduct
      o : Object
      o = p.object , p.proj‚ÇÅ , p.proj‚ÇÇ
      module _ {Xx : Object} where
        open Œ£ Xx renaming (proj‚ÇÅ to X ; proj‚ÇÇ to x)
        ‚ÑÇXo : ‚ÑÇ [ X , isp.object ]
        ‚ÑÇXo = isp._P[_√ó_] (proj‚ÇÅ x) (proj‚ÇÇ x)
        ump = p.ump (proj‚ÇÅ x) (proj‚ÇÇ x)
        Xoo = proj‚ÇÅ (proj‚ÇÇ ump)
        Xo : Arrow Xx o
        Xo = ‚ÑÇXo , Xoo
        contractible : ‚àÄ y ‚Üí Xo ‚â° y
        contractible (y , yy) = res
          where
          k : ‚ÑÇXo ‚â° y
          k = proj‚ÇÇ (proj‚ÇÇ ump) (yy)
          prp : ‚àÄ a ‚Üí isProp
            ( (‚ÑÇ [ p.proj‚ÇÅ ‚àò a ] ‚â° proj‚ÇÅ x)
            √ó (‚ÑÇ [ p.proj‚ÇÇ ‚àò a ] ‚â° proj‚ÇÇ x)
            )
          prp ab ac ad i
            = ‚ÑÇ.arrowsAreSets _ _ (proj‚ÇÅ ac) (proj‚ÇÅ ad) i
            , ‚ÑÇ.arrowsAreSets _ _ (proj‚ÇÇ ac) (proj‚ÇÇ ad) i
          h :
            ( Œª i
              ‚Üí ‚ÑÇ [ p.proj‚ÇÅ ‚àò k i ] ‚â° proj‚ÇÅ x
              √ó ‚ÑÇ [ p.proj‚ÇÇ ‚àò k i ] ‚â° proj‚ÇÇ x
            ) [ Xoo ‚â° yy ]
          h = lemPropF prp k
          res : (‚ÑÇXo , Xoo) ‚â° (y , yy)
          res i = k i , h i
      t : IsTerminal o
      t {Xx} = Xo , contractible
    ve-re : ‚àÄ x ‚Üí g (f x) ‚â° x
    ve-re x = Propositionality.propTerminal _ _
    re-ve : ‚àÄ x ‚Üí f (g x) ‚â° x
    re-ve x = {!!}
    inv : AreInverses f g
    inv = record
      { verso-recto = funExt ve-re
      ; recto-verso = funExt re-ve
      }

  thm : isProp (Product ‚ÑÇ A B)
  thm = equivPreservesNType {n = ‚ü®-1‚ü©} lemma Propositionality.propTerminal
