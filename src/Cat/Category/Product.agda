{-# OPTIONS --allow-unsolved-metas --cubical --caching #-}
module Cat.Category.Product where

open import Cat.Prelude as P hiding (_√ó_ ; fst ; snd)
open import Cat.Equivalence hiding (_‚âÖ_)

open import Cat.Category

module _ {‚Ñìa ‚Ñìb : Level} (‚ÑÇ : Category ‚Ñìa ‚Ñìb) where

  open Category ‚ÑÇ

  module _ (A B : Object) where
    record RawProduct : Set (‚Ñìa ‚äî ‚Ñìb) where
      no-eta-equality
      field
        object : Object
        fst  : ‚ÑÇ [ object , A ]
        snd  : ‚ÑÇ [ object , B ]

    -- FIXME Not sure this is actually a proposition - so this name is
    -- misleading.
    record IsProduct (raw : RawProduct) : Set (‚Ñìa ‚äî ‚Ñìb) where
      open RawProduct raw public
      field
        ump : ‚àÄ {X : Object} (f : ‚ÑÇ [ X , A ]) (g : ‚ÑÇ [ X , B ])
          ‚Üí ‚àÉ![ f√óg ] (‚ÑÇ [ fst ‚àò f√óg ] ‚â° f P.√ó ‚ÑÇ [ snd ‚àò f√óg ] ‚â° g)

      -- | Arrow product
      _P[_√ó_] : ‚àÄ {X} ‚Üí (œÄ‚ÇÅ : ‚ÑÇ [ X , A ]) (œÄ‚ÇÇ : ‚ÑÇ [ X , B ])
        ‚Üí ‚ÑÇ [ X , object ]
      _P[_√ó_] œÄ‚ÇÅ œÄ‚ÇÇ = P.fst (ump œÄ‚ÇÅ œÄ‚ÇÇ)

    record Product : Set (‚Ñìa ‚äî ‚Ñìb) where
      field
        raw        : RawProduct
        isProduct  : IsProduct raw

      open IsProduct isProduct public

  record HasProducts : Set (‚Ñìa ‚äî ‚Ñìb) where
    field
      product : ‚àÄ (A B : Object) ‚Üí Product A B

    _√ó_ : Object ‚Üí Object ‚Üí Object
    A √ó B = Product.object (product A B)

    -- | Parallel product of arrows
    --
    -- The product mentioned in awodey in Def 6.1 is not the regular product of
    -- arrows. It's a "parallel" product
    module _ {A A' B B' : Object} where
      open Product using (_P[_√ó_])
      open Product (product A B) hiding (_P[_√ó_]) renaming (fst to fst ; snd to snd)
      _|√ó|_ : ‚ÑÇ [ A , A' ] ‚Üí ‚ÑÇ [ B , B' ] ‚Üí ‚ÑÇ [ A √ó B , A' √ó B' ]
      f |√ó| g = product A' B'
        P[ ‚ÑÇ [ f ‚àò fst ]
        √ó  ‚ÑÇ [ g ‚àò snd ]
        ]

module _ {‚Ñìa ‚Ñìb : Level} {‚ÑÇ : Category ‚Ñìa ‚Ñìb} {A B : Category.Object ‚ÑÇ} where
  private
    open Category ‚ÑÇ
    module _ (raw : RawProduct ‚ÑÇ A B) where
      module _ (x y : IsProduct ‚ÑÇ A B raw) where
        private
          module x = IsProduct x
          module y = IsProduct y

        module _ {X : Object} (f : ‚ÑÇ [ X , A ]) (g : ‚ÑÇ [ X , B ]) where
          module _ (f√óg : Arrow X y.object) where
            help : isProp (‚àÄ{y} ‚Üí (‚ÑÇ [ y.fst ‚àò y ] ‚â° f) P.√ó (‚ÑÇ [ y.snd ‚àò y ] ‚â° g) ‚Üí f√óg ‚â° y)
            help = propPiImpl (Œª _ ‚Üí propPi (Œª _ ‚Üí arrowsAreSets _ _))

          res = ‚àÉ-unique (x.ump f g) (y.ump f g)

          prodAux : x.ump f g ‚â° y.ump f g
          prodAux = lemSig ((Œª f√óg ‚Üí propSig (propSig (arrowsAreSets _ _) Œª _ ‚Üí arrowsAreSets _ _) (Œª _ ‚Üí help f√óg))) _ _ res

        propIsProduct' : x ‚â° y
        propIsProduct' i = record { ump = Œª f g ‚Üí prodAux f g i }

      propIsProduct : isProp (IsProduct ‚ÑÇ A B raw)
      propIsProduct = propIsProduct'

  Product‚â° : {x y : Product ‚ÑÇ A B} ‚Üí (Product.raw x ‚â° Product.raw y) ‚Üí x ‚â° y
  Product‚â° {x} {y} p i = record { raw = p i ; isProduct = q i }
    where
    q : (Œª i ‚Üí IsProduct ‚ÑÇ A B (p i)) [ Product.isProduct x ‚â° Product.isProduct y ]
    q = lemPropF propIsProduct p

module Try0 {‚Ñìa ‚Ñìb : Level} {‚ÑÇ : Category ‚Ñìa ‚Ñìb}
  (let module ‚ÑÇ = Category ‚ÑÇ) {A B : ‚ÑÇ.Object} where

  open P

  module _ where
    raw : RawCategory _ _
    raw = record
      { Object = Œ£[ X ‚àà ‚ÑÇ.Object ] ‚ÑÇ.Arrow X A √ó ‚ÑÇ.Arrow X B
      ; Arrow = Œª{ (X , x0 , x1) (Y , y0 , y1)
        ‚Üí Œ£[ f ‚àà ‚ÑÇ.Arrow X Y ]
            ‚ÑÇ [ y0 ‚àò f ] ‚â° x0
          √ó ‚ÑÇ [ y1 ‚àò f ] ‚â° x1
          }
      ; identity = Œª{ {X , f , g} ‚Üí ‚ÑÇ.identity {X} , ‚ÑÇ.rightIdentity , ‚ÑÇ.rightIdentity}
      ; _<<<_ = Œª { {_ , a0 , a1} {_ , b0 , b1} {_ , c0 , c1} (f , f0 , f1) (g , g0 , g1)
        ‚Üí (f ‚ÑÇ.<<< g)
          , (begin
              ‚ÑÇ [ c0 ‚àò ‚ÑÇ [ f ‚àò g ] ] ‚â°‚ü® ‚ÑÇ.isAssociative ‚ü©
              ‚ÑÇ [ ‚ÑÇ [ c0 ‚àò f ] ‚àò g ] ‚â°‚ü® cong (Œª œÜ ‚Üí ‚ÑÇ [ œÜ ‚àò g ]) f0 ‚ü©
              ‚ÑÇ [ b0 ‚àò g ] ‚â°‚ü® g0 ‚ü©
              a0 ‚àé
            )
          , (begin
             ‚ÑÇ [ c1 ‚àò ‚ÑÇ [ f ‚àò g ] ] ‚â°‚ü® ‚ÑÇ.isAssociative ‚ü©
             ‚ÑÇ [ ‚ÑÇ [ c1 ‚àò f ] ‚àò g ] ‚â°‚ü® cong (Œª œÜ ‚Üí ‚ÑÇ [ œÜ ‚àò g ]) f1 ‚ü©
             ‚ÑÇ [ b1 ‚àò g ] ‚â°‚ü® g1 ‚ü©
              a1 ‚àé
            )
        }
      }

    module _ where
      private
        open RawCategory raw

        propEqs : ‚àÄ {X' : Object}{Y' : Object} (let X , xa , xb = X') (let Y , ya , yb = Y')
                  ‚Üí (xy : ‚ÑÇ.Arrow X Y) ‚Üí isProp (‚ÑÇ [ ya ‚àò xy ] ‚â° xa √ó ‚ÑÇ [ yb ‚àò xy ] ‚â° xb)
        propEqs xs = propSig (‚ÑÇ.arrowsAreSets _ _) (\ _ ‚Üí ‚ÑÇ.arrowsAreSets _ _)

        isAssociative : IsAssociative
        isAssociative {A'@(A , a0 , a1)} {B , _} {C , c0 , c1} {D'@(D , d0 , d1)} {ff@(f , f0 , f1)} {gg@(g , g0 , g1)} {hh@(h , h0 , h1)} i
          = s0 i , lemPropF propEqs s0 {P.snd l} {P.snd r} i
          where
          l = hh <<< (gg <<< ff)
          r = hh <<< gg <<< ff
          -- s0 : h ‚ÑÇ.<<< (g ‚ÑÇ.<<< f) ‚â° h ‚ÑÇ.<<< g ‚ÑÇ.<<< f
          s0 : fst l ‚â° fst r
          s0 = ‚ÑÇ.isAssociative {f = f} {g} {h}


        isIdentity : IsIdentity identity
        isIdentity {AA@(A , a0 , a1)} {BB@(B , b0 , b1)} {f , f0 , f1} = leftIdentity , rightIdentity
          where
          leftIdentity : identity <<< (f , f0 , f1) ‚â° (f , f0 , f1)
          leftIdentity i = l i , lemPropF propEqs l {snd L} {snd R} i
            where
            L = identity <<< (f , f0 , f1)
            R : Arrow AA BB
            R = f , f0 , f1
            l : fst L ‚â° fst R
            l = ‚ÑÇ.leftIdentity
          rightIdentity : (f , f0 , f1) <<< identity ‚â° (f , f0 , f1)
          rightIdentity i = l i , lemPropF propEqs l {snd L} {snd R} i
            where
            L = (f , f0 , f1) <<< identity
            R : Arrow AA BB
            R = (f , f0 , f1)
            l : ‚ÑÇ [ f ‚àò ‚ÑÇ.identity ] ‚â° f
            l = ‚ÑÇ.rightIdentity

        arrowsAreSets : ArrowsAreSets
        arrowsAreSets {X , x0 , x1} {Y , y0 , y1}
          = sigPresNType {n = ‚ü®0‚ü©} ‚ÑÇ.arrowsAreSets Œª a ‚Üí propSet (propEqs _)

      isPreCat : IsPreCategory raw
      IsPreCategory.isAssociative isPreCat = isAssociative
      IsPreCategory.isIdentity    isPreCat = isIdentity
      IsPreCategory.arrowsAreSets isPreCat = arrowsAreSets

    open IsPreCategory isPreCat

    module _ (ùïè ùïê : Object) where
      open Œ£ ùïè renaming (fst to X ; snd to x)
      open Œ£ x renaming (fst to xa ; snd to xb)
      open Œ£ ùïê renaming (fst to Y ; snd to y)
      open Œ£ y renaming (fst to ya ; snd to yb)
      open import Cat.Equivalence using (composeIso) renaming (_‚âÖ_ to _‚âà_)
      step0
        : ((X , xa , xb) ‚â° (Y , ya , yb))
        ‚âà (Œ£[ p ‚àà (X ‚â° Y) ] (PathP (Œª i ‚Üí ‚ÑÇ.Arrow (p i) A) xa ya) √ó (PathP (Œª i ‚Üí ‚ÑÇ.Arrow (p i) B) xb yb))
      step0
        = (Œª p ‚Üí cong fst p , cong-d (fst ‚àò snd) p , cong-d (snd ‚àò snd) p)
        -- , (Œª x  ‚Üí Œª i ‚Üí fst x i , (fst (snd x) i) , (snd (snd x) i))
        , (Œª{ (p , q , r) ‚Üí Œ£‚â° p Œª i ‚Üí q i , r i})
        , funExt (Œª{ p ‚Üí refl})
        , funExt (Œª{ (p , q , r) ‚Üí refl})

      -- Should follow from c being univalent
      iso-id-inv : {p : X ‚â° Y} ‚Üí p ‚â° ‚ÑÇ.isoToId (‚ÑÇ.idToIso X Y p)
      iso-id-inv {p} = sym (Œª i ‚Üí AreInverses.verso-recto ‚ÑÇ.inverse-from-to-iso' i p)
      id-iso-inv : {iso : X ‚ÑÇ.‚âÖ Y} ‚Üí iso ‚â° ‚ÑÇ.idToIso X Y (‚ÑÇ.isoToId iso)
      id-iso-inv {iso} = sym (Œª i ‚Üí AreInverses.recto-verso ‚ÑÇ.inverse-from-to-iso' i iso)

      lemA : {A B : Object} {f g : Arrow A B} ‚Üí fst f ‚â° fst g ‚Üí f ‚â° g
      lemA {A} {B} {f = f} {g} p i = p i , h i
         where
         h : PathP (Œª i ‚Üí
           (‚ÑÇ [ fst (snd B) ‚àò p i ]) ‚â° fst (snd A) √ó
           (‚ÑÇ [ snd (snd B) ‚àò p i ]) ‚â° snd (snd A)
           ) (snd f) (snd g)
         h = lemPropF (Œª a ‚Üí propSig
           (‚ÑÇ.arrowsAreSets (‚ÑÇ [ fst (snd B) ‚àò a ]) (fst (snd A)))
           Œª _ ‚Üí ‚ÑÇ.arrowsAreSets (‚ÑÇ [ snd (snd B) ‚àò a ]) (snd (snd A)))
           p

      step1
        : (Œ£[ p ‚àà (X ‚â° Y) ] (PathP (Œª i ‚Üí ‚ÑÇ.Arrow (p i) A) xa ya) √ó (PathP (Œª i ‚Üí ‚ÑÇ.Arrow (p i) B) xb yb))
        ‚âà Œ£ (X ‚ÑÇ.‚âÖ Y) (Œª iso
          ‚Üí let p = ‚ÑÇ.isoToId iso
          in
          ( PathP (Œª i ‚Üí ‚ÑÇ.Arrow (p i) A) xa ya)
          √ó PathP (Œª i ‚Üí ‚ÑÇ.Arrow (p i) B) xb yb
          )
      step1
        = (Œª{ (p , x)
          ‚Üí (‚ÑÇ.idToIso _ _ p)
          , let
             P-l : (p : X ‚â° Y) ‚Üí Set _
             P-l œÜ = PathP (Œª i ‚Üí ‚ÑÇ.Arrow (œÜ i) A) xa ya
             P-r : (p : X ‚â° Y) ‚Üí Set _
             P-r œÜ = PathP (Œª i ‚Üí ‚ÑÇ.Arrow (œÜ i) B) xb yb
             left  : P-l p
             left = fst x
             right : P-r p
             right = snd x
           in subst {P = P-l} iso-id-inv left , subst {P = P-r} iso-id-inv right
          })
        -- Goal is:
        --
        --     œÜ x
        --
        -- where `x` is
        --
        --   ‚ÑÇ.isoToId (‚ÑÇ.idToIso _ _ p)
        --
        -- I have `œÜ p` in scope, but surely `p` and `x` are the same - though
        -- perhaps not definitonally.
        , (Œª{ (iso , x) ‚Üí ‚ÑÇ.isoToId iso , x})
        , funExt (Œª{ (p , q , r) ‚Üí Œ£‚â° (sym iso-id-inv) (toPathP {A = Œª i ‚Üí {!!}} {!!})})
        , funExt (Œª x ‚Üí Œ£‚â° (sym id-iso-inv) {!!})
      step2
        : Œ£ (X ‚ÑÇ.‚âÖ Y) (Œª iso
          ‚Üí let p = ‚ÑÇ.isoToId iso
          in
          ( PathP (Œª i ‚Üí ‚ÑÇ.Arrow (p i) A) xa ya)
          √ó PathP (Œª i ‚Üí ‚ÑÇ.Arrow (p i) B) xb yb
          )
        ‚âà ((X , xa , xb) ‚âÖ (Y , ya , yb))
      step2
        = ( Œª{ ((f , f~ , inv-f) , p , q)
            ‚Üí
            let
              r : X ‚â° Y
              r = ‚ÑÇ.isoToId (f , f~ , inv-f)
              r-arrow : (‚ÑÇ.Arrow X A) ‚â° (‚ÑÇ.Arrow Y A)
              r-arrow i = ‚ÑÇ.Arrow (r i) A
              t : coe r-arrow xa ‚â° ‚ÑÇ.identity ‚ÑÇ.<<< xa ‚ÑÇ.<<< f~
              t = {!? ‚â° ?!}
              lem : ‚àÄ {x} ‚Üí ‚ÑÇ.idToIso _ _ (‚ÑÇ.isoToId x) ‚â° x
              lem {x} i = snd ‚ÑÇ.inverse-from-to-iso' i x
              h : ya ‚â° xa ‚ÑÇ.<<< f~
              h = begin
                ya ‚â°‚ü® {!!} ‚ü©
                coe r-arrow  xa
                  ‚â°‚ü® ‚ÑÇ.9-1-9 r refl xa ‚ü©
                fst (‚ÑÇ.idToIso _ _ refl) ‚ÑÇ.<<< xa ‚ÑÇ.<<< fst (snd (‚ÑÇ.idToIso _ _ r))
                  ‚â°‚ü® cong (Œª œÜ ‚Üí œÜ ‚ÑÇ.<<< xa ‚ÑÇ.<<< fst (snd (‚ÑÇ.idToIso _ _ r))) (subst-neutral {P = Œª x ‚Üí ‚ÑÇ.Arrow x x}) ‚ü©
                ‚ÑÇ.identity ‚ÑÇ.<<< xa ‚ÑÇ.<<< fst (snd (‚ÑÇ.idToIso _ _ r))
                  ‚â°‚ü® cong (Œª œÜ ‚Üí ‚ÑÇ.identity ‚ÑÇ.<<< xa ‚ÑÇ.<<< œÜ) (cong (Œª x ‚Üí (fst (snd x))) lem) ‚ü©
                ‚ÑÇ.identity ‚ÑÇ.<<< xa ‚ÑÇ.<<< f~
                  ‚â°‚ü® cong (‚ÑÇ._<<< f~) ‚ÑÇ.leftIdentity ‚ü©
                xa ‚ÑÇ.<<< f~ ‚àé
            in
              ( f  , {!h!} , {!!})
            , ( f~ , sym h , {!!})
            , lemA (fst inv-f)
            , lemA (snd inv-f)
            }
          )
        , (Œª{ (f , f~ , inv-f , inv-f~) ‚Üí
          let
            iso : X ‚ÑÇ.‚âÖ Y
            iso = fst f , fst f~ , cong fst inv-f , cong fst inv-f~
            helper : PathP (Œª i ‚Üí ‚ÑÇ.Arrow (‚ÑÇ.isoToId {!!} i) A) xa ya
            helper = {!!}
          in iso , helper , {!!}})
        , record
          { fst = funExt (Œª x ‚Üí lemSig
            (Œª x ‚Üí propSig prop0 (Œª _ ‚Üí prop1))
            _ _
            (Œ£‚â° {!!} (‚ÑÇ.propIsomorphism _ _ _)))
          ; snd = funExt (Œª{ (f , _) ‚Üí lemSig propIsomorphism _ _ {!refl!}})
          }
          where
          prop0 : ‚àÄ {x} ‚Üí isProp (PathP (Œª i ‚Üí ‚ÑÇ.Arrow (‚ÑÇ.isoToId x i) A) xa ya)
          prop0 {x} = pathJ (Œª y p ‚Üí ‚àÄ x ‚Üí isProp (PathP (Œª i ‚Üí ‚ÑÇ.Arrow (p i) A) xa x)) (Œª x ‚Üí ‚ÑÇ.arrowsAreSets _ _) Y (‚ÑÇ.isoToId x) ya
          prop1 : ‚àÄ {x} ‚Üí isProp (PathP (Œª i ‚Üí ‚ÑÇ.Arrow (‚ÑÇ.isoToId x i) B) xb yb)
          prop1 {x} = pathJ (Œª y p ‚Üí ‚àÄ x ‚Üí isProp (PathP (Œª i ‚Üí ‚ÑÇ.Arrow (p i) B) xb x)) (Œª x ‚Üí ‚ÑÇ.arrowsAreSets _ _) Y (‚ÑÇ.isoToId x) yb
      -- One thing to watch out for here is that the isomorphisms going forwards
      -- must compose to give idToIso
      iso
        : ((X , xa , xb) ‚â° (Y , ya , yb))
        ‚âà ((X , xa , xb) ‚âÖ (Y , ya , yb))
      iso = step0 ‚äô step1 ‚äô step2
        where
        infixl 5 _‚äô_
        _‚äô_ = composeIso
      equiv1
        : ((X , xa , xb) ‚â° (Y , ya , yb))
        ‚âÉ ((X , xa , xb) ‚âÖ (Y , ya , yb))
      equiv1 = _ , fromIso _ _ (snd iso)

    univalent : Univalent
    univalent = from[Andrea] equiv1

    isCat : IsCategory raw
    IsCategory.isPreCategory isCat = isPreCat
    IsCategory.univalent     isCat = univalent

    cat : Category _ _
    cat = record
      { raw = raw
      ; isCategory = isCat
      }

  open Category cat

  lemma : Terminal ‚âÉ Product ‚ÑÇ A B
  lemma = fromIsomorphism Terminal (Product ‚ÑÇ A B) (f , g , inv)
    where
    f : Terminal ‚Üí Product ‚ÑÇ A B
    f ((X , x0 , x1) , uniq) = p
      where
      rawP : RawProduct ‚ÑÇ A B
      rawP = record
        { object = X
        ; fst = x0
        ; snd = x1
        }
      -- open RawProduct rawP renaming (fst to x0 ; snd to x1)
      module _ {Y : ‚ÑÇ.Object} (p0 : ‚ÑÇ [ Y , A ]) (p1 : ‚ÑÇ [ Y , B ]) where
        uy : isContr (Arrow (Y , p0 , p1) (X , x0 , x1))
        uy = uniq {Y , p0 , p1}
        open Œ£ uy renaming (fst to Y‚ÜíX ; snd to contractible)
        open Œ£ Y‚ÜíX renaming (fst to p0√óp1 ; snd to cond)
        ump : ‚àÉ![ f√óg ] (‚ÑÇ [ x0 ‚àò f√óg ] ‚â° p0 P.√ó ‚ÑÇ [ x1 ‚àò f√óg ] ‚â° p1)
        ump = p0√óp1 , cond , Œª {y} x ‚Üí let k = contractible (y , x) in Œª i ‚Üí fst (k i)
      isP : IsProduct ‚ÑÇ A B rawP
      isP = record { ump = ump }
      p : Product ‚ÑÇ A B
      p = record
        { raw = rawP
        ; isProduct = isP
        }
    g : Product ‚ÑÇ A B ‚Üí Terminal
    g p = o , t
      where
      module p = Product p
      module isp = IsProduct p.isProduct
      o : Object
      o = p.object , p.fst , p.snd
      module _ {Xx : Object} where
        open Œ£ Xx renaming (fst to X ; snd to x)
        ‚ÑÇXo : ‚ÑÇ [ X , isp.object ]
        ‚ÑÇXo = isp._P[_√ó_] (fst x) (snd x)
        ump = p.ump (fst x) (snd x)
        Xoo = fst (snd ump)
        Xo : Arrow Xx o
        Xo = ‚ÑÇXo , Xoo
        contractible : ‚àÄ y ‚Üí Xo ‚â° y
        contractible (y , yy) = res
          where
          k : ‚ÑÇXo ‚â° y
          k = snd (snd ump) (yy)
          prp : ‚àÄ a ‚Üí isProp
            ( (‚ÑÇ [ p.fst ‚àò a ] ‚â° fst x)
            √ó (‚ÑÇ [ p.snd ‚àò a ] ‚â° snd x)
            )
          prp ab ac ad i
            = ‚ÑÇ.arrowsAreSets _ _ (fst ac) (fst ad) i
            , ‚ÑÇ.arrowsAreSets _ _ (snd ac) (snd ad) i
          h :
            ( Œª i
              ‚Üí ‚ÑÇ [ p.fst ‚àò k i ] ‚â° fst x
              √ó ‚ÑÇ [ p.snd ‚àò k i ] ‚â° snd x
            ) [ Xoo ‚â° yy ]
          h = lemPropF prp k
          res : (‚ÑÇXo , Xoo) ‚â° (y , yy)
          res i = k i , h i
      t : IsTerminal o
      t {Xx} = Xo , contractible
    ve-re : ‚àÄ x ‚Üí g (f x) ‚â° x
    ve-re x = Propositionality.propTerminal _ _
    re-ve : ‚àÄ p ‚Üí f (g p) ‚â° p
    re-ve p = Product‚â° e
      where
      module p = Product p
      -- RawProduct does not have eta-equality.
      e : Product.raw (f (g p)) ‚â° Product.raw p
      RawProduct.object (e i) = p.object
      RawProduct.fst (e i) = p.fst
      RawProduct.snd (e i) = p.snd
    inv : AreInverses f g
    inv = funExt ve-re , funExt re-ve

  propProduct : isProp (Product ‚ÑÇ A B)
  propProduct = equivPreservesNType {n = ‚ü®-1‚ü©} lemma Propositionality.propTerminal

module _ {‚Ñìa ‚Ñìb : Level} {‚ÑÇ : Category ‚Ñìa ‚Ñìb} {A B : Category.Object ‚ÑÇ} where
  open Category ‚ÑÇ
  private
    module _ (x y : HasProducts ‚ÑÇ) where
      private
        module x = HasProducts x
        module y = HasProducts y

      productEq : x.product ‚â° y.product
      productEq = funExt Œª A ‚Üí funExt Œª B ‚Üí Try0.propProduct _ _

  propHasProducts : isProp (HasProducts ‚ÑÇ)
  propHasProducts x y i = record { product = productEq x y i }

fmap‚â° : {A : Set} {a0 a1 : A} {B : Set} ‚Üí (f : A ‚Üí B) ‚Üí Path a0 a1 ‚Üí Path (f a0) (f a1)
fmap‚â° = cong
