{-# OPTIONS --allow-unsolved-metas --cubical #-}
module Cat.Category.Product where

open import Cat.Prelude hiding (_√ó_ ; proj‚ÇÅ ; proj‚ÇÇ)
import Data.Product as P

open import Cat.Category

module _ {‚Ñìa ‚Ñìb : Level} (‚ÑÇ : Category ‚Ñìa ‚Ñìb) where

  open Category ‚ÑÇ

  module _ (A B : Object) where
    record RawProduct : Set (‚Ñìa ‚äî ‚Ñìb) where
      no-eta-equality
      field
        object : Object
        proj‚ÇÅ  : ‚ÑÇ [ object , A ]
        proj‚ÇÇ  : ‚ÑÇ [ object , B ]

    -- FIXME Not sure this is actually a proposition - so this name is
    -- misleading.
    record IsProduct (raw : RawProduct) : Set (‚Ñìa ‚äî ‚Ñìb) where
      open RawProduct raw public
      field
        ump : ‚àÄ {X : Object} (f : ‚ÑÇ [ X , A ]) (g : ‚ÑÇ [ X , B ])
          ‚Üí ‚àÉ![ f√óg ] (‚ÑÇ [ proj‚ÇÅ ‚àò f√óg ] ‚â° f P.√ó ‚ÑÇ [ proj‚ÇÇ ‚àò f√óg ] ‚â° g)

      -- | Arrow product
      _P[_√ó_] : ‚àÄ {X} ‚Üí (œÄ‚ÇÅ : ‚ÑÇ [ X , A ]) (œÄ‚ÇÇ : ‚ÑÇ [ X , B ])
        ‚Üí ‚ÑÇ [ X , object ]
      _P[_√ó_] œÄ‚ÇÅ œÄ‚ÇÇ = P.proj‚ÇÅ (ump œÄ‚ÇÅ œÄ‚ÇÇ)

    record Product : Set (‚Ñìa ‚äî ‚Ñìb) where
      field
        raw        : RawProduct
        isProduct  : IsProduct raw

      open IsProduct isProduct public

  record HasProducts : Set (‚Ñìa ‚äî ‚Ñìb) where
    field
      product : ‚àÄ (A B : Object) ‚Üí Product A B

    _√ó_ : Object ‚Üí Object ‚Üí Object
    A √ó B = Product.object (product A B)

    -- | Parallel product of arrows
    --
    -- The product mentioned in awodey in Def 6.1 is not the regular product of
    -- arrows. It's a "parallel" product
    module _ {A A' B B' : Object} where
      open Product
      open Product (product A B) hiding (_P[_√ó_]) renaming (proj‚ÇÅ to fst ; proj‚ÇÇ to snd)
      _|√ó|_ : ‚ÑÇ [ A , A' ] ‚Üí ‚ÑÇ [ B , B' ] ‚Üí ‚ÑÇ [ A √ó B , A' √ó B' ]
      f |√ó| g = product A' B'
        P[ ‚ÑÇ [ f ‚àò fst ]
        √ó  ‚ÑÇ [ g ‚àò snd ]
        ]

module _ {‚Ñìa ‚Ñìb : Level} {‚ÑÇ : Category ‚Ñìa ‚Ñìb} {A B : Category.Object ‚ÑÇ} where
  private
    open Category ‚ÑÇ
    module _ (raw : RawProduct ‚ÑÇ A B) where
      module _ (x y : IsProduct ‚ÑÇ A B raw) where
        private
          module x = IsProduct x
          module y = IsProduct y

        module _ {X : Object} (f : ‚ÑÇ [ X , A ]) (g : ‚ÑÇ [ X , B ]) where
          prodAux : x.ump f g ‚â° y.ump f g
          prodAux = {!!}

        propIsProduct' : x ‚â° y
        propIsProduct' i = record { ump = Œª f g ‚Üí prodAux f g i }

      propIsProduct : isProp (IsProduct ‚ÑÇ A B raw)
      propIsProduct = propIsProduct'

  Product‚â° : {x y : Product ‚ÑÇ A B} ‚Üí (Product.raw x ‚â° Product.raw y) ‚Üí x ‚â° y
  Product‚â° {x} {y} p i = record { raw = p i ; isProduct = q i }
    where
    q : (Œª i ‚Üí IsProduct ‚ÑÇ A B (p i)) [ Product.isProduct x ‚â° Product.isProduct y ]
    q = lemPropF propIsProduct p

module _ {‚Ñìa ‚Ñìb : Level} {‚ÑÇ : Category ‚Ñìa ‚Ñìb} {A B : Category.Object ‚ÑÇ} where
  open Category ‚ÑÇ
  private
    module _ (x y : HasProducts ‚ÑÇ) where
      private
        module x = HasProducts x
        module y = HasProducts y
      module _ (A B : Object) where
        module pX = Product (x.product A B)
        module pY = Product (y.product A B)
        objEq : pX.object ‚â° pY.object
        objEq = {!!}
        proj‚ÇÅEq : (Œª i ‚Üí ‚ÑÇ [ objEq i , A ]) [ pX.proj‚ÇÅ ‚â° pY.proj‚ÇÅ ]
        proj‚ÇÅEq = {!!}
        proj‚ÇÇEq : (Œª i ‚Üí ‚ÑÇ [ objEq i , B ]) [ pX.proj‚ÇÇ ‚â° pY.proj‚ÇÇ ]
        proj‚ÇÇEq = {!!}
        rawEq : pX.raw ‚â° pY.raw
        RawProduct.object (rawEq i) = objEq i
        RawProduct.proj‚ÇÅ  (rawEq i) = {!!}
        RawProduct.proj‚ÇÇ  (rawEq i) = {!!}

        isEq : (Œª i ‚Üí IsProduct ‚ÑÇ A B (rawEq i)) [ pX.isProduct ‚â° pY.isProduct ]
        isEq = {!!}

        appEq : x.product A B ‚â° y.product A B
        appEq = Product‚â° rawEq

      productEq : x.product ‚â° y.product
      productEq i = Œª A B ‚Üí appEq A B i

      propHasProducts' : x ‚â° y
      propHasProducts' i = record { product = productEq i }

  propHasProducts : isProp (HasProducts ‚ÑÇ)
  propHasProducts = propHasProducts'

module Try0 {‚Ñìa ‚Ñìb : Level} {‚ÑÇ : Category ‚Ñìa ‚Ñìb}
  (let module ‚ÑÇ = Category ‚ÑÇ) {A B : ‚ÑÇ.Object} (p : Product ‚ÑÇ A B) where

  -- open Product p hiding (raw)
  open import Data.Product

  raw : RawCategory _ _
  raw = record
    { Object = Œ£[ X ‚àà ‚ÑÇ.Object ] ‚ÑÇ.Arrow X A √ó ‚ÑÇ.Arrow X B
    ; Arrow = Œª{ (A , _) (B , _) ‚Üí ‚ÑÇ.Arrow A B}
    ; ùüô = Œª{ {A , _} ‚Üí ‚ÑÇ.ùüô {A}}
    ; _‚àò_ = ‚ÑÇ._‚àò_
    }

  open RawCategory raw
  open Univalence ‚ÑÇ.isIdentity
  open import Cat.Equivalence hiding (_‚âÖ_)

  k : {A B : ‚ÑÇ.Object} ‚Üí isEquiv (A ‚â° B) (A ‚ÑÇ.‚âÖ B) (‚ÑÇ.id-to-iso A B)
  k = ‚ÑÇ.univalent

  module _ {X' Y' : Œ£[ X ‚àà ‚ÑÇ.Object ] (‚ÑÇ [ X , A ] √ó ‚ÑÇ [ X , B ])} where
    open Œ£ X' renaming (proj‚ÇÅ to X) using ()
    open Œ£ (proj‚ÇÇ X') renaming (proj‚ÇÅ to Xxa ; proj‚ÇÇ to Xxb)
    open Œ£ Y' renaming (proj‚ÇÅ to Y) using ()
    open Œ£ (proj‚ÇÇ Y') renaming (proj‚ÇÅ to Yxa ; proj‚ÇÇ to Yxb)
    module _ (p : X ‚â° Y) where
      D : ‚àÄ y ‚Üí X ‚â° y ‚Üí Set _
      D y q = ‚àÄ b ‚Üí (Œª i ‚Üí ‚ÑÇ [ q i , A ]) [ Xxa ‚â° b ]
      -- Not sure this is actually provable - but if it were it might involve
      -- something like the ump of the product -- in which case perhaps the
      -- objects of the category I'm constructing should not merely be the
      -- data-part of the product but also the laws.

      -- d : D X refl
      d : ‚àÄ b ‚Üí (Œª i ‚Üí ‚ÑÇ [ X , A ]) [ Xxa ‚â° b ]
      d b = {!!}
      kk : D Y p
      kk = pathJ D d Y p
      a : (Œª i ‚Üí ‚ÑÇ [ p i , A ]) [ Xxa ‚â° Yxa ]
      a = kk Yxa
      b : (Œª i ‚Üí ‚ÑÇ [ p i , B ]) [ Xxb ‚â° Yxb ]
      b = {!!}
      f : X' ‚â° Y'
      f i = p i , a i , b i

    module _ (p : X' ‚â° Y') where
      g : X ‚â° Y
      g i = proj‚ÇÅ (p i)

    step0 : (X' ‚â° Y') ‚âÉ (X ‚â° Y)
    step0 = Equiv‚âÉ.fromIsomorphism _ _ (g , f , record { verso-recto = {!refl!} ; recto-verso = refl})

    step1 : (X ‚â° Y) ‚âÉ X ‚ÑÇ.‚âÖ Y
    step1 = ‚ÑÇ.univalent‚âÉ

    -- Just a reminder
    step1-5 : (X' ‚âÖ Y') ‚â° (X ‚ÑÇ.‚âÖ Y)
    step1-5 = refl

    step2 : (X' ‚â° Y') ‚âÉ (X ‚ÑÇ.‚âÖ Y)
    step2 = Equivalence.compose step0 step1

    univalent : isEquiv (X' ‚â° Y') (X ‚ÑÇ.‚âÖ Y) (id-to-iso X' Y')
    univalent = proj‚ÇÇ step2

  isCategory : IsCategory raw
  isCategory = record
    { isAssociative = ‚ÑÇ.isAssociative
    ; isIdentity = ‚ÑÇ.isIdentity
    ; arrowsAreSets = ‚ÑÇ.arrowsAreSets
    ; univalent = univalent
    }

  category : Category _ _
  category = record
    { raw = raw
    ; isCategory = isCategory
    }

  open Category category hiding (IsTerminal ; Object)

  -- Essential turns `p : Product ‚ÑÇ A B` into a triple
  productObject : Object
  productObject = Product.object p , Product.proj‚ÇÅ p , Product.proj‚ÇÇ p

  productObjectIsTerminal : IsTerminal productObject
  productObjectIsTerminal = {!!}

  proppp : isProp (IsTerminal productObject)
  proppp = Propositionality.propIsTerminal productObject

module Try1 {‚Ñìa ‚Ñìb : Level} (A B : Set) where
  open import Data.Product
  raw : RawCategory _ _
  raw = record
    { Object = Œ£[ X ‚àà Set ] (X ‚Üí A) √ó (X ‚Üí B)
    ; Arrow = Œª{ (X0 , f0 , g0) (X1 , f1 , g1) ‚Üí X0 ‚Üí X1}
    ; ùüô = Œª x ‚Üí x
    ; _‚àò_ = Œª x x‚ÇÅ x‚ÇÇ ‚Üí x (x‚ÇÅ x‚ÇÇ)
    }

  open RawCategory raw

  isCategory : IsCategory raw
  isCategory = record
    { isAssociative = refl
    ; isIdentity = refl , refl
    ; arrowsAreSets = {!!}
    ; univalent = {!!}
    }

  t : IsTerminal ((A √ó B) , proj‚ÇÅ , proj‚ÇÇ)
  t = {!!}
