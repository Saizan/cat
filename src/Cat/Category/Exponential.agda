module Cat.Category.Exponential where

open import Agda.Primitive
open import Data.Product
open import Cubical

open import Cat.Category
open import Cat.Category.Product

open Category

module _ {‚Ñì ‚Ñì'} (‚ÑÇ : Category ‚Ñì ‚Ñì') {{hasProducts : HasProducts ‚ÑÇ}} where
  open HasProducts hasProducts
  open Product hiding (obj)
  private
    _√óp_ : (A B : Object ‚ÑÇ) ‚Üí Object ‚ÑÇ
    _√óp_ A B = Product.obj (product A B)

  module _ (B C : Object ‚ÑÇ) where
    IsExponential : (C·¥Æ : Object ‚ÑÇ) ‚Üí ‚ÑÇ [ C·¥Æ √óp B , C ] ‚Üí Set (‚Ñì ‚äî ‚Ñì')
    IsExponential C·¥Æ eval = ‚àÄ (A : Object ‚ÑÇ) (f : ‚ÑÇ [ A √óp B , C ])
      ‚Üí ‚àÉ![ f~ ] (‚ÑÇ [ eval ‚àò parallelProduct f~ (Category.ùüô ‚ÑÇ)] ‚â° f)

    record Exponential : Set (‚Ñì ‚äî ‚Ñì') where
      field
        -- obj ‚â° C·¥Æ
        obj : Object ‚ÑÇ
        eval : ‚ÑÇ [ obj √óp B , C ]
        {{isExponential}} : IsExponential obj eval
      -- If I make this an instance-argument then the instance resolution
      -- algorithm goes into an infinite loop. Why?
      exponentialsHaveProducts : HasProducts ‚ÑÇ
      exponentialsHaveProducts = hasProducts
      transpose : (A : Object ‚ÑÇ) ‚Üí ‚ÑÇ [ A √óp B , C ] ‚Üí ‚ÑÇ [ A , obj ]
      transpose A f = proj‚ÇÅ (isExponential A f)

record HasExponentials {‚Ñì ‚Ñì' : Level} (‚ÑÇ : Category ‚Ñì ‚Ñì') {{_ : HasProducts ‚ÑÇ}} : Set (‚Ñì ‚äî ‚Ñì') where
  field
    exponent : (A B : Object ‚ÑÇ) ‚Üí Exponential ‚ÑÇ A B
