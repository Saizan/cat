module Cat.Category.Monoid where

open import Agda.Primitive

open import Cat.Category
open import Cat.Category.Product
open import Cat.Category.Functor
import Cat.Categories.Cat as Cat

-- TODO: Incorrect!
module _ (‚Ñìa ‚Ñìb : Level) where
  private
    ‚Ñì = lsuc (‚Ñìa ‚äî ‚Ñìb)

    -- *If* the category of categories existed `_√ó_` would be equivalent to the
    -- one brought into scope by doing:
    --
    --     open HasProducts (Cat.hasProducts unprovable) using (_√ó_)
    --
    -- Since it doesn't we'll make the following (definitionally equivalent) ad-hoc definition.
    _√ó_ : ‚àÄ {‚Ñìa ‚Ñìb} ‚Üí Category ‚Ñìa ‚Ñìb ‚Üí Category ‚Ñìa ‚Ñìb ‚Üí Category ‚Ñìa ‚Ñìb
    ‚ÑÇ √ó ùîª = Cat.CatProduct.object ‚ÑÇ ùîª

  record RawMonoidalCategory : Set ‚Ñì where
    field
      category : Category ‚Ñìa ‚Ñìb
    open Category category public
    field
      {{hasProducts}} : HasProducts category
      empty  : Object
      -- aka. tensor product, monoidal product.
      append : Functor (category √ó category) category
    open HasProducts hasProducts public

  record MonoidalCategory : Set ‚Ñì where
    field
      raw : RawMonoidalCategory
    open RawMonoidalCategory raw public

module _ {‚Ñìa ‚Ñìb : Level} (‚ÑÇ : MonoidalCategory ‚Ñìa ‚Ñìb) where
  private
    ‚Ñì = ‚Ñìa ‚äî ‚Ñìb

  open MonoidalCategory ‚ÑÇ public

  record Monoid : Set ‚Ñì where
    field
      carrier : Object
      mempty  : Arrow empty carrier
      mappend : Arrow (carrier √ó carrier) carrier
